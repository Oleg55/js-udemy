// Любое регулярное выражение состоит из 2 частей
// 1 - паттерн (шаблон)
// 2 - флаги

// варианты создания реглярного выражения
// таким вариантом почти не пользуются new RegExp('pattern', 'flags');

// самый популярный 
// разберем на примерах

const ans = prompt('ВВедите имя');


const reg = /n/; // шаблон того что мы ищем, ищем маленькую букву n
console.log(ans.search(reg)); // методом search ищем строку в подстроке
// у нас есть 3 флага

// i - если хотим найти что-то не зависимо от регистра
// g - найти несколько вхождений
// m - многострочный режим (поиск в строках с переносами)
const reg2 = /n/i;

// в консоле мы увидим первую позицию на которой нашли результат букву n 
// либо -1 если такой буквы нет
console.log(ans.search(reg2));

// флаг g - не работает с методом search - так как он всегда ищет только 1 совпадение
// флаги можно комбинироать
// const reg2 = /n/igm;

// поиск через match
// 'n' - что искали
// индекс на котором нашли первое вхождение
// строка в которой искали

console.log(ans.match(reg2)); // ['n', index: 1, input: 'Ann', groups: undefined]

// добавить g и мы сможем искать несклько вхождений
const reg3 = /n/ig;
console.log(ans.match(reg3)); // ) ['n', 'n']

// замена подстроки

const pass = prompt('Password');
// . - означает что мы берем все элементы которые попадут в строку
// g - берем каждый символ
// "*" - заменяем на *
console.log(pass.replace(/./g, "*"));

// если нужно взять просто . то ее нужно экранировать
// такой \ мы экранируем таким же \ и т.д.
console.log(pass.replace(/\./g, "*"));

// еще 1 пример замены подстроки

console.log('12-34-56'.replace(/-/g, ':'));

// Методы регулярных выражентий

const reg4 = /n/ig;
// если в строке есть n, test вернет true если нет то false
console.log(reg4.test(ans));

// если мы хотим искать не что-то конкретное, а какой то класс симолов типа: буквы, цифры, пробелы
// для этого есть понятие классов в регулярных выражениях

// \d - цифры
// \w - все слова
// \s - все пробелы, пробелы можно и так искать const reg = / /ig; 

// пример с поиском цифр в строке

const num = prompt('Введите ваше число');

const reg5 = /\d/g;
console.log(num.match(reg5)); // ['1', '3', '1', '2', '3'

// пример с комбинацией классов
// вырезаем имя
const str = 'My name is R2D2';
// шаблон это - буква потом цифра потом буква = \w\d\w\d = R2D2
console.log(str.match(/\w\d\w\d/i)); // ['R2D2', index: 11, input: 'My name is R2D2', groups: undefined]

// Обратные классы НЕ слова, НЕ числа, НЕ пробелы

// \D - не числа
// \W - не слова
// \S - не пробелы
console.log(str.match(/\D/ig)); // (13) ['M', 'y', ' ', 'n', 'a', 'm', 'e', ' ', 'i', 's', ' ', 'R', 'D']
console.log(str.match(/\W/ig)); // [' ', ' ', ' ']
console.log(str.match(/\S/ig)); // ['M', 'y', 'n', 'a', 'm', 'e', 'i', 's', 'R', '2', 'D', '2']
console.log(str.match(/\w/ig)); // ['M', 'y', 'n', 'a', 'm', 'e', 'i', 's', 'R', '2', 'D', '2']
