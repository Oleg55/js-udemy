// Прием модуль
// применяется для того что бы скрыть внутренние детали скрипта
// применяется для разделения функционала большого скрипта
// модули не зависят от другого кода и они самодостаточны
// позволяют избежать ситуации с одинаковыми именами и не засаряют глобально пространство переменных
// все данные модуля существуют только в его области видимости

// есть два основных способа создания модулей через
// нативную реализацию

// 1 способ (использовать ананимную самовызывающуюся функцию)

const number = 1;  // <---- для наглядности области видимости

// так мы получаем локальную область видимости
// внешние круглые скобки нужны для того чтоб мы не получили ошибку
// так как без них у нас получается function declaration - а она не может быть анонимной
// скобки первращают функцию в function exspression - a она может не иметь имени

(function(){  // <-------- ананимная (без имени)
    let number = 2;
    console.log(number);
    console.log(number + 3);

}()); // () <----------- самовызывающаяся

console.log(number); // <---- для наглядности области видимости


// 2 способ (использование обьектного интерфейса)
// наш модуль записываем в переменную
// и в нем возращаем методы доступные снаружи

const user = (function(){
    // функция лежит в локальной области видимости
    const  privat = function() {
        console.log('I am privat!');
    };

    // мы можем использовать обьектны интерфейс
    // когда мы из этой ананимной функции возвращаем обьект
    return {
        // прописыаем в новый обьект метод sayHello
        // и передаем ссылку на нашу приватную функцию privat
        sayHello: privat
    };

}());

// используем снаружи
user.sayHello();

// после ввода классов для таких целей использую именно их